{"version":3,"sources":["./src/app/pages/produtor/produtor.page.html","./src/app/pages/produtor/produtor.module.ts","./src/app/pages/produtor/produtor.page.scss","./src/app/pages/produtor/produtor.page.ts"],"names":[],"mappings":"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","file":"pages-produtor-produtor-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title text=center>Produtor Rural</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<!-- <ion-button expand=\\\"full\\\" (click)=\\\"createDB()\\\"> Criar Banco de Dados</ion-button> -->\\n<ion-content>\\n  \\n  <ion-item>\\n       <ion-label position=\\\"fixed\\\">Nome : </ion-label>\\n       <ion-input [(ngModel)]=\\\"nome\\\"></ion-input>\\n  </ion-item>\\n\\n  <ion-item>\\n    <ion-label position=\\\"fixed\\\">E-mail : </ion-label>\\n    <ion-input [(ngModel)]=\\\"email\\\"></ion-input>\\n</ion-item>\\n\\n<ion-button expand=\\\"full\\\" (click)=\\\"add()\\\"> Salvar </ion-button>\\n\\n<ion-list>\\n\\n    <ion-list-header>\\n        <ion-label> \\n             Listagem\\n        </ion-label>\\n    </ion-list-header>\\n  \\n    <ion-item-sliding *ngFor=\\\"let item of row_data\\\">\\n      <ion-item>\\n          <ion-label text-wrap>\\n              <h3> Produtor : {{item.id}}-{{ item.nome }}</h3>\\n                <ion-text color=\\\"secondary\\\">\\n                  <p> E-mail : {{ item.email }}</p>\\n                </ion-text>\\n          </ion-label>\\n      </ion-item>    \\n      <ion-item-options side=\\\"end\\\">\\n           <ion-item-option color=\\\"secondary\\\" (click)=\\\"update(item)\\\">Altera</ion-item-option>\\n           <ion-item-option color=\\\"danger\\\" (click)=\\\"delete(item)\\\">Excluir</ion-item-option>         \\n      </ion-item-options>\\n    </ion-item-sliding>\\n</ion-list>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ProdutorPage } from './produtor.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProdutorPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ProdutorPage]\n})\nexport class ProdutorPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2R1dG9yL3Byb2R1dG9yLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\n\n\n@Component({\n  selector: 'app-produtor',\n  templateUrl: './produtor.page.html',\n  styleUrls: ['./produtor.page.scss'],\n})\nexport class ProdutorPage implements OnInit {\n \n  databaseObj: SQLiteObject; // Database instance object\n  nome:string=\"\";\n  email:string=\"\";\n\n  name_model:string = \"\"; // Input field model\n  row_data: any = []; // Table rows\n  readonly database_name:string = \"ipedDB\"; // DB name\n  readonly table_name:string = \"produtor\"; // Table name\n\n\n  constructor(private sqlite: SQLite){\n        \n  }\n\n  \n \n  createDB() {\n\n    this.sqlite.create({\n       name: this.database_name,\n       location: 'default'\n     })\n       .then((db: SQLiteObject) => {\n         this.databaseObj = db;\n         //alert('Banco de dados Criado !');\n         this.createTable();\n       })\n       .catch(e => {\n         alert(\"error \" + JSON.stringify(e))\n       });\n }\n\n  createTable() {\n  this.databaseObj.executeSql('CREATE TABLE IF NOT EXISTS ' + this.table_name + ' (id INTEGER PRIMARY KEY, nome varchar(255) not null, email varchar(255) not null)', [])\n    .then(() => {\n      //alert('Tabela Produtor criada !');\n      this.getAll();\n    })\n    .catch(e => {\n      alert(\"error \" + JSON.stringify(e))\n    });\n}\n \n\nadd() {\n  if (!this.nome.length) {\n    alert(\"Entre com o nome !\");\n    return;\n  }\n this.databaseObj.executeSql('INSERT INTO ' + this.table_name + ' (nome,email) VALUES (\"' + this.nome+ '\",\"'+this.email+'\")', [])\n .then(() => {\n      alert('Produtor Inserido !');\n      this.nome=\"\";\n      this.email=\"\";\n      this.getAll();\n    })\n    .catch(e => {\n      alert(\"error \" + JSON.stringify(e))\n    });\n   \n  }\n\n\n  getAll() {\n    this.databaseObj.executeSql(\"SELECT * FROM \" + this.table_name, [])\n      .then((res) => {\n        this.row_data = [];\n        if (res.rows.length > 0) {\n          for (var i = 0; i < res.rows.length; i++) {\n            this.row_data.push(res.rows.item(i));\n          }\n        }\n      })\n      .catch(e => {\n        alert(\"error \" + JSON.stringify(e))\n      });\n  }\n\n\ndelete(item) {\n  this.databaseObj.executeSql(\"DELETE FROM \" + this.table_name + \" WHERE id = \" + item.id, [])\n    .then((res) => {\n      alert(\"Produtor removido !\");\n      this.getAll();\n    })\n    .catch(e => {\n      alert(\"error \" + JSON.stringify(e))\n    });\n}\n\n\n  update() {\n      \n\n  }\n\n  /*async showToast(msg){\n    const toast = await this.toastController.create({\n      message: msg, \n      duration: 2000\n      });\n      toast.present(); \n  }\n  */\n\n  ngOnInit() {\n    this.createDB();\n        //this.getAll(); \n    \n  }\n\n\n\n}\n"],"sourceRoot":""}